function [methodinfo,structs,enuminfo,ThunkLibName]=interfacewrapper
%INTERFACEWRAPPER Create structures to define interfaces found in 'CInterfaceFunctions'.

%This function was generated by loadlibrary.m parser version  on Wed Apr 29 13:19:13 2020
%perl options:'CInterfaceFunctions.i -outfile=interfacewrapper.m -thunkfile=libCInterface_thunk_pcwin64.c -header=CInterfaceFunctions.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libCInterface_thunk_pcwin64');
% const char * getLastMessage (); 
fcns.thunkname{fcnNum}='cstringThunk';fcns.name{fcnNum}='getLastMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int StartGmat (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='StartGmat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int LoadScript ( const char * scriptName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='LoadScript'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int RunScript (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='RunScript'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int LoadAndRunScript ( const char * scriptName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='LoadAndRunScript'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int FindOdeModel ( const char * modelName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='FindOdeModel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int SetModel ( int modelID ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='SetModel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int SetModelByName ( const char * modelName ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='SetModelByName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int GetStateSize (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='GetStateSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% const char * GetStateDescription (); 
fcns.thunkname{fcnNum}='cstringThunk';fcns.name{fcnNum}='GetStateDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int SetState ( double epoch , double state [], int stateDim ); 
fcns.thunkname{fcnNum}='int32doublevoidPtrint32Thunk';fcns.name{fcnNum}='SetState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% double * GetState (); 
fcns.thunkname{fcnNum}='voidPtrThunk';fcns.name{fcnNum}='GetState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% double * GetDerivativesForState ( double epoch , double state [], int stateDim , double dt , int order , int * pdim ); 
fcns.thunkname{fcnNum}='voidPtrdoublevoidPtrint32doubleint32voidPtrThunk';fcns.name{fcnNum}='GetDerivativesForState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}={'double', 'doublePtr', 'int32', 'double', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% double * GetDerivatives ( double dt , int order , int * pdim ); 
fcns.thunkname{fcnNum}='voidPtrdoubleint32voidPtrThunk';fcns.name{fcnNum}='GetDerivatives'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='doublePtr'; fcns.RHS{fcnNum}={'double', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int CountObjects (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='CountObjects'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% const char * GetObjectName ( int which ); 
fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='GetObjectName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% const char * GetRunSummary (); 
fcns.thunkname{fcnNum}='cstringThunk';fcns.name{fcnNum}='GetRunSummary'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
methodinfo=fcns;